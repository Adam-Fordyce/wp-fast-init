---
# Simple playbook to launch EC2 instance in existing AWS estate.
# Not intended to manage VPCs, NAT Gateways, Subnets etc

- name: Create Ec2 instances
  hosts: localhost
  gather_facts: false
  vars:
    aws_ssh_key_name: ansible-key
    ssh_key_filename: id_ed25519
    user_data: "{{ lookup('file', 'userdata.txt') }}"
  vars_files:
    - vars.yml
  tasks:

    # Block is a Group of Tasks combined together
    - name: Get Info Block
      block:
        - name: Get Running instance Info

          ec2_instance_info:
            filters:
              instance-state-name: ["running"]
          register: ec2info

        - name: Get existing ec2 instance details
          amazon.aws.ec2_instance_info:
            filters:
              instance-state-name: ["running"]
          register: ec2_info

        - name: Store the ec2_info in facts
          set_fact:
            instance_id: |-
              {{
                ec2info.instances |
                selectattr('tags.Name', 'defined') |
                selectattr('tags.Name', 'equalto', 'appserver') |
                map(attribute='instance_id') |
                list |
                first | default()
              }}

        - name: Get default subnet in the aws region
          amazon.aws.ec2_vpc_subnet_info:
            filters:
              availability-zone: "{{ aws_default_az }}"
              default-for-az: true
          register: subnets

      # By specifying always on the tag,
      # I let this block to run all the time by module_default
      # this is for security to net create ec2 instances accidentally
      tags: ['always', 'getinfoonly']

    - name: Create EC2 Block
      block:

        - name: generate SSH key "id_ed25519"
          openssh_keypair:
            path: "{{ playbook_dir }}/../{{ ssh_key_filename }}"
            type: ed25519
            size: 512
            state: present
            force: false
            mode: "0600"
          register: ssh_key_details

        - name: try creating a key pair with name of an already existing keypair
          amazon.aws.ec2_key:
            name: "{{ aws_ssh_key_name }}"
            key_material: "{{ ssh_key_details.public_key }}"
            force: true
          when: ssh_key_details.changed == true

        - name: start an instance with a public IP address
          tags: create_ec2
          amazon.aws.ec2_instance:
            name: appserver
            key_name: "{{ aws_ssh_key_name }}"
            detailed_monitoring: true
            vpc_subnet_id: |-
              {{
                subnets.subnets |
                selectattr('subnet_id', 'defined') |
                map(attribute='subnet_id') |
                list |
                first
              }}
            instance_type: "{{ instance_type }}"
            user_data: "{{ user_data }}"
            state: running
            security_group: default
            network:
              assign_public_ip: true
            image_id: "ami-09d56f8956ab235b3"
            wait: true
            wait_timeout: 500
            count: 1
            metadata_options:
              http_endpoint: enabled
              http_tokens: optional
            tags:
              Name: AppServer
              Deployment: GitPod
              Environment: Testing
              os: Ubuntu
          register: ec2
          delegate_to: localhost
          when: instance_id | length <= 0

        - name: get ec2 instance details
          amazon.aws.ec2_instance_info:
            filters:
              instance-state-name: ["running"]
          register: ec2_info_post
          delegate_to: localhost

        - name: Allow SSH, HTTP, and HTTPS through the default security group
          amazon.aws.ec2_group:
            name: default
            description: Default Security Group
            rules:
              - proto: tcp
                from_port: 80
                to_port: 80
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 22
                to_port: 22
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 443
                to_port: 443
                cidr_ip: 0.0.0.0/0
              - proto: icmp
                from_port: 8 # icmp type, -1 = any type
                to_port: -1 # icmp subtype, -1 = any subtype
                cidr_ip: 0.0.0.0/0

        - name: Add instance to host group
          ansible.builtin.add_host:
            hostname: "{{ item.public_ip_address }}"
            groupname: launched
          loop: "{{ ec2_info_post.instances }}"
          loop_control:
            loop_var: item
            label: "{{ item.instance_id }} - {{ item.public_ip_address }}"

        - name: Wait for SSH to come up
          ansible.builtin.wait_for:
            host: "{{ item.public_ip_address }}"
            port: 22
            delay: 10
            timeout: 120
          delegate_to: localhost
          loop: "{{ ec2_info_post.instances }}"
          loop_control:
            loop_var: item
            label: "{{ item.instance_id }} - {{ item.public_ip_address }}"

        - name: Create Inventory
          copy:
            content: |-
              ---
              {% for instance in ec2_info_post.instances %}
              all:
                children:
                  controller:
                    hosts:
                      localhost:
                  webserver:
                    hosts:
                      {{ instance.tags.Name }}:
                        ansible_host: {{ instance.public_ip_address }}
                        ansible_user: ubuntu
                        ansible_ssh_private_key_file: {{ ssh_key_filename }}
              {% endfor %}
              ...
            dest: "{{ playbook_dir}}/../inventory/hosts.yaml"
      # By specifying never on the tag of this block,
      # I let this block to run only when explicitely being called
      tags: ['never', 'ec2-create']
